versions:
# spinnaker libs
  fiat: "0.34.0"
  kork: "1.127.1"
  scheduledActions: "0.38.0"
  clouddriver: "1.762.0"
  front50: "1.72.0"
# third party
  akka: "2.3.9"
  archaius: "0.7.5"
  astyanax: "3.8.0"
  aws: "1.11.264"
  awsObjectMapper: "1.11.264"
  cglib: "3.2.0"
  commonsExec: "1.3"
  dynomite: "1.6.3-rc.10"
  eureka: "1.8.6"
  fabric8Api: "2.2.216"
  fabric8Client: "3.0.3"
  frigga: "0.18.0"
  googleCompute: "alpha-rev57-1.23.0"
  googleHttp: "1.23.0"
  googleMonitoring: "v3-rev11-1.22.0"
  googleStorage: "v1-rev116-1.23.0"
  groovy: "{{org.codehaus.groovy:groovy}}"
  guava: "{{com.google.guava:guava}}"
  hamcrest: "{{org.hamcrest:hamcrest-core}}"
  hamkrest: "1.4.2.2"
  httpclient: "{{org.apache.httpcomponents:httpclient}}"
  #httpcore bom: "{{org.apache.httpcomponents:httpcore}}"
  httpcore: "4.3.3"
  jackson: "2.9.2" # "{{com.fasterxml.jackson.core:jackson-core}}"
  jedis: "2.9.0" # "{{redis.clients:jedis}}"
  jsonPath: "2.2.0" # "{{com.jayway.jsonpath:json-path}}"
  junit: "{{junit:junit}}"
  junit5: "1.0.2"
  jupiter: "5.0.2"
  kotlin: "1.2.0"
  lombok: "1.16.10" # "{{org.projectlombok:lombok}}"
  logback: "1.1.7"
  logstash: "4.11"
  mockitoKotlin: "1.5.0"
  objenesis: "{{org.objenesis:objenesis}}"
  #okhttp bom: "{{com.squareup.okhttp:okhttp}}"
  okHttp: "2.7.0"
  redisEmbedded: "0.7.0"
  retrofit: "1.9.0"
  rxJava: "1.3.8"
  slf4j: "{{org.slf4j:slf4j-api}}"
  snappy: "{{org.xerial.snappy:snappy-java}}"
  spectator: "0.57.1"
  spek: "1.1.5"
  #spock bom: "{{org.spockframework:spock-core}}"
  spock: "1.1-groovy-2.4"
  spring: "{{org.springframework:spring-core}}"
  springBoot: "{{org.springframework.boot:spring-boot}}"
  springSecurity: "{{org.springframework.security:spring-security-core}}"

groups:
  akka:
    compile:
      - akkaCore
      - akkaPersistence
    testCompile:
      - akkaActorTests
  amazon:
    compile:
      - aws
      - awsObjectMapper
      - httpclient
      - httpcore
  awsCreds:
    compile:
      - awsEc2
      - awsIam
      - awsSts
  bootWeb:
    compile:
      - bootActuator
      - bootWeb
      - logstashEncoder
  cassandra:
    compile:
      - astyanaxCql
      - astyanaxCassandra
      - astyanaxThrift
      - astyanaxTest
  fiat:
    compile:
      - fiat
      - springSecurityConfig
      - springSecurityCore
      - springSecurityWeb
    compileOnly:
      - bootActuator
      - bootWeb
  google:
    compile:
      - googleCompute
      - googleHttp
      - googleStorage
  jackson:
    compile:
      - jacksonCore
      - jacksonDatabind
      - jacksonAnnotations
  kubernetes:
    compile:
      - fabric8Client
  spockBase:
    testCompile:
      - spock
      - cglib
      - objenesis
  spek:
    testCompile:
      - junitPlatformRunner
      - spekApi
      - spekSubjectExtension
      - mockitoKotlin
      - hamkrest
      - junitJupiterApi
    testRuntime:
      - junitPlatformLauncher
      - junitJupiterEngine
      - junitVintageEngine
      - spekJunitPlatformEngine
  retrofitDefault:
    compile:
      - retrofit
      - okHttp
      - okHttpUrlconnection
      - okHttpApache
      - retrofitJackson
    testCompile:
      - retrofitMock
  test:
    testCompile:
      - bootTest
      - spock
      - spockSpring
      - springTest
      - cglib
      - objenesis
      - junit
      - hamcrestCore
  lombok:
    compile:
      - lombok
    testCompile:
      - groovy
      - spock
  scheduledActions:
    compile:
      - scheduledActionsCore
      - scheduledActionsCassandra
      - scheduledActionsClustered
      - scheduledActionsWeb


dependencies:
# spinnaker libs
  clouddriverSecurity: "com.netflix.spinnaker.clouddriver:clouddriver-security:${versions.clouddriver}"
  clouddriverAppengine: "com.netflix.spinnaker.clouddriver:clouddriver-appengine:${versions.clouddriver}"
  clouddriverAws: "com.netflix.spinnaker.clouddriver:clouddriver-aws:${versions.clouddriver}"
  clouddriverAzure: "com.netflix.spinnaker.clouddriver:clouddriver-azure:${versions.clouddriver}"
  clouddriverCf: "com.netflix.spinnaker.clouddriver:clouddriver-cf:${versions.clouddriver}"
  clouddriverDocker: "com.netflix.spinnaker.clouddriver:clouddriver-docker:${versions.clouddriver}"
  clouddriverGoogle: "com.netflix.spinnaker.clouddriver:clouddriver-google:${versions.clouddriver}"
  clouddriverGoogleCommon: "com.netflix.spinnaker.clouddriver:clouddriver-google-common:${versions.clouddriver}"
  clouddriverKubernetes: "com.netflix.spinnaker.clouddriver:clouddriver-kubernetes:${versions.clouddriver}"
  clouddriverOpenstack: "com.netflix.spinnaker.clouddriver:clouddriver-openstack:${versions.clouddriver}"
  clouddriverTitus: "com.netflix.spinnaker.clouddriver:clouddriver-titus:${versions.clouddriver}"
  fiat: "com.netflix.spinnaker.fiat:fiat-api:${versions.fiat}"
  front50Gcs: "com.netflix.spinnaker.front50:front50-gcs:${versions.front50}"
  front50S3: "com.netflix.spinnaker.front50:front50-s3:${versions.front50}"
  kork: "com.netflix.spinnaker.kork:kork-core:${versions.kork}"
  korkArtifacts: "com.netflix.spinnaker.kork:kork-artifacts:${versions.kork}"
  korkCassandra: "com.netflix.spinnaker.kork:kork-cassandra:${versions.kork}"
  korkDynomite: "com.netflix.spinnaker.kork:kork-dynomite:${versions.kork}"
  korkExceptions: "com.netflix.spinnaker.kork:kork-exceptions:${versions.kork}"
  korkJedis: "com.netflix.spinnaker.kork:kork-jedis:${versions.kork}"
  korkJedisTest: "com.netflix.spinnaker.kork:kork-jedis-test:${versions.kork}"
  korkSecurity: "com.netflix.spinnaker.kork:kork-security:${versions.kork}"
  korkStackdriver: "com.netflix.spinnaker.kork:kork-stackdriver:${versions.kork}"
  korkSwagger: "com.netflix.spinnaker.kork:kork-swagger:${versions.kork}"
  korkHystrix: "com.netflix.spinnaker.kork:kork-hystrix:${versions.kork}"
  korkWeb: "com.netflix.spinnaker.kork:kork-web:${versions.kork}"
  korkAws: "com.netflix.spinnaker.kork:kork-aws:${versions.kork}"
  scheduledActionsCore: "com.netflix.scheduledactions:scheduled-actions-core:${versions.scheduledActions}"
  scheduledActionsCassandra: "com.netflix.scheduledactions:scheduled-actions-cassandra:${versions.scheduledActions}"
  scheduledActionsClustered: "com.netflix.scheduledactions:scheduled-actions-clustered:${versions.scheduledActions}"
  scheduledActionsWeb: "com.netflix.scheduledactions:scheduled-actions-web:${versions.scheduledActions}"
# third party
  akkaCore: "com.typesafe.akka:akka-actor_2.11:${versions.akka}"
  akkaPersistence: "com.typesafe.akka:akka-persistence-experimental_2.11:${versions.akka}"
  akkaActorTests: "com.typesafe.akka:akka-actor-tests_2.11:${versions.akka}"
  archaiusCore: "com.netflix.archaius:archaius-core:${versions.archaius}"
  astyanaxCassandra: "com.netflix.astyanax:astyanax-cassandra:${versions.astyanax}"
  astyanaxCql: "com.netflix.astyanax:astyanax-cql:${versions.astyanax}"
  astyanaxThrift: "com.netflix.astyanax:astyanax-thrift:${versions.astyanax}"
  astyanaxTest: "com.netflix.astyanax:astyanax-test:${versions.astyanax}"
  aws: "com.amazonaws:aws-java-sdk:${versions.aws}"
  awsCore: "com.amazonaws:aws-java-sdk-core:${versions.aws}"
  awsEc2: "com.amazonaws:aws-java-sdk-ec2:${versions.aws}"
  awsIam: "com.amazonaws:aws-java-sdk-iam:${versions.aws}"
  awsSts: "com.amazonaws:aws-java-sdk-sts:${versions.aws}"
  awsObjectMapper: "com.netflix.awsobjectmapper:awsobjectmapper:${versions.awsObjectMapper}"
  bootActuator: "org.springframework.boot:spring-boot-starter-actuator:${versions.springBoot}"
  bootAutoConfigure: "org.springframework.boot:spring-boot-autoconfigure:${versions.springBoot}"
  bootDataRest: "org.springframework.boot:spring-boot-starter-data-rest:${versions.springBoot}"
  bootTest: "org.springframework.boot:spring-boot-starter-test:${versions.springBoot}"
  bootWeb: "org.springframework.boot:spring-boot-starter-web:${versions.springBoot}"
  cglib: "cglib:cglib-nodep:${versions.cglib}"
  commonsExec: "org.apache.commons:commons-exec:${versions.commonsExec}"
  dynomite: "com.netflix.dyno:dyno-jedis:${versions.dynomite}"
  eurekaClient: "com.netflix.eureka:eureka-client:${versions.eureka}"
  fabric8Api: "io.fabric8:kubernetes-api:${versions.fabric8Api}"
  fabric8Client: "io.fabric8:kubernetes-client:${versions.fabric8Client}"
  frigga: "com.netflix.frigga:frigga:${versions.frigga}"
  googleCompute: "com.google.apis:google-api-services-compute:${versions.googleCompute}"
  googleHttp: "com.google.http-client:google-http-client-jackson2:${versions.googleHttp}"
  googleMonitoring: "com.google.apis:google-api-services-monitoring:${versions.googleMonitoring}"
  googleStorage: "com.google.apis:google-api-services-storage:${versions.googleStorage}"
  groovy: "org.codehaus.groovy:groovy-all:${versions.groovy}"
  guava: "com.google.guava:guava:${versions.guava}"
  hamcrestCore: "org.hamcrest:hamcrest-core:${versions.hamcrest}"
  hamkrest: "com.natpryce:hamkrest:${versions.hamkrest}"
  httpclient: "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  httpcore: "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  jacksonAnnotations: "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  jacksonCore: "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  jacksonDatabind: "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  jacksonGuava: "com.fasterxml.jackson.datatype:jackson-datatype-guava:${versions.jackson}"
  jacksonJdk8: "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions.jackson}"
  jacksonJsr310: "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
  jacksonLombok: "com.xebia:jackson-lombok:1.0"
  jedis: "redis.clients:jedis:${versions.jedis}"
  junit: "junit:junit:${versions.junit}"
  junitJupiterApi: "org.junit.jupiter:junit-jupiter-api:${versions.jupiter}"
  junitJupiterEngine: "org.junit.jupiter:junit-jupiter-engine:${versions.jupiter}"
  junitPlatformRunner: "org.junit.platform:junit-platform-runner:${versions.junit5}"
  junitPlatformLauncher: "org.junit.platform:junit-platform-launcher:${versions.junit5}"
  junitVintageEngine: "org.junit.vintage:junit-vintage-engine:${versions.junit}"
  lombok: "org.projectlombok:lombok:${versions.lombok}"
  logbackClassic: "ch.qos.logback:logback-classic:${versions.logback}"
  logstashEncoder: "net.logstash.logback:logstash-logback-encoder:${versions.logstash}"
  mockitoKotlin: "com.nhaarman:mockito-kotlin:versions.mockitoKotlin"
  objenesis: "org.objenesis:objenesis:${versions.objenesis}"
  okHttp: "com.squareup.okhttp:okhttp:${versions.okHttp}"
  okHttpUrlconnection: "com.squareup.okhttp:okhttp-urlconnection:${versions.okHttp}"
  okHttpApache: "com.squareup.okhttp:okhttp-apache:${versions.okHttp}"
  redisEmbedded: "com.netflix.spinnaker.embedded-redis:embedded-redis:${versions.redisEmbedded}"
  retrofit: "com.squareup.retrofit:retrofit:${versions.retrofit}"
  retrofitJackson: "com.squareup.retrofit:converter-jackson:${versions.retrofit}"
  retrofitMock: "com.squareup.retrofit:retrofit-mock:${versions.retrofit}"
  rxJava: "io.reactivex:rxjava:${versions.rxJava}"
  spectatorApi: "com.netflix.spectator:spectator-api:${versions.spectator}"
  spectatorAws: "com.netflix.spectator:spectator-ext-aws:${versions.spectator}"
  spectatorGc: "com.netflix.spectator:spectator-ext-gc:${versions.spectator}"
  spectatorJvm: "com.netflix.spectator:spectator-ext-jvm:${versions.spectator}"
  spectatorReg: "com.netflix.spectator:spectator-reg-metrics3:${versions.spectator}"
  spectatorWebSpring: "com.netflix.spectator:spectator-web-spring:${versions.spectator}"
  spekApi: "org.jetbrains.spek:spek-api:${versions.spek}"
  spekSubjectExtension: "org.jetbrains.spek:spek-subject-extension:${versions.spek}"
  spekJunitPlatformEngine: "org.jetbrains.spek:spek-junit-platform-engine:${versions.spek}"
  slf4j: "org.slf4j:jcl-over-slf4j:${versions.slf4j}"
  slf4jApi: "org.slf4j:slf4j-api:${versions.slf4j}"
  slf4jSimple: "org.slf4j:slf4j-simple:${versions.slf4j}"
  snappy: "org.xerial.snappy:snappy-java:${versions.snappy}"
  spock: "org.spockframework:spock-core:${versions.spock}"
  spockSpring: "org.spockframework:spock-spring:${versions.spock}"
  springBeans: "org.springframework:spring-beans:${versions.spring}"
  springContext: "org.springframework:spring-context:${versions.spring}"
  springSecurityConfig: "org.springframework.security:spring-security-config:${versions.springSecurity}"
  springSecurityCore: "org.springframework.security:spring-security-core:${versions.springSecurity}"
  springSecurityWeb: "org.springframework.security:spring-security-web:${versions.springSecurity}"
  springTest: "org.springframework:spring-test:${versions.spring}"
